_DX = _DATA;

/* The root panel. vis[_VX] == this.root*/
_VX = new pv.Panel()
    .width(_DX.w)
    .height(_DX.h)
    .bottom(20)
    .left(20)
    .right(10)
    .top(5);

//_VX.links = [];
_VX.selectionArgs = 2;

/* scales. */
_VX.x = pv.Scale._SCALE(0, 99).range(0, _DX.h);
_VX.y = pv.Scale._SCALE(0, 1).range(0, _DX.h);
_VX.c = pv.Scale._SCALE(0, 100).range("blue", "black");

_VX.updating = false;

/* Y-axis and ticks. */
_VX.add(pv.Rule)
    .data(_VX.y.ticks())
    .bottom(_VX.y)
    .strokeStyle(function(d) {return d ? "#eee" : "#000"})
  .anchor("left").add(pv.Label)
    .visible(function(d) {return d > 0 && d < 1})
    .text(_VX.y.tickFormat);

/* X-axis and ticks. */
_VX.add(pv.Rule)
    .data(_VX.x.ticks())
    .left(_VX.x)
    .strokeStyle(function(d) {return d ? "#eee" : "#000"})
  .anchor("bottom").add(pv.Label)
    .visible(function(d) {return d > 0 && d < 100})
    .text(_VX.x.tickFormat);

/* The dot plot! */
_VX.tdata = _VX.add(pv.Panel);
    _VX.tdata.data(_DX.data)
  .add(pv.Dot)
    .left(_DX.xval)
    .bottom(_DX.yval)
    .strokeStyle(_DX.colour)
    .fillStyle(function() {return this.strokeStyle().alpha(.2)})
    .size(_DX.size)
    .title(_DX.title);//----------
	
_VX.s = false;

_VX.internalUpdate = function(d) {
	_VX.s = d;	
	//cont. updatation
	this.root.updateLinks(d);
}
_VX.updateLinks = function(d) {
	var L = this.root.links;
	this.root.updating = true;
	for(i=0; i<L.length; i++)
		vis[ L[i] ].doUpdate(d, this.root);
	this.root.updating = false;

}
_VX.doUpdate = function(d, src) {
	
	if( this.root.updating )
		return;
		
	if( this.root.selectionArgs < 1 )
		return;
	
	var x = this.root.x( src.x.invert(d.x) );
	var dx = this.root.x(src.x.invert(d.x + d.dx)) - x;
	
	var y,dy;
	if( this.root.selectionArgs > 1 ) {
		y = this.root.y( src.y.invert(d.y) );
		dy = this.root.y(src.y.invert(d.y + d.dy)) - y;
	}
	else {
		y = 0;
		dy = _DX.w;
	}
	
	this.root.s = true;
	this.root.selection.data([{x:x, y:y, dx:dx, dy:dy}]);
	this.root.render();
}

_VX.dataUpdate = function( newData ) {
	this.root.tdata.data( newData );
	this.root.s = false; //removes earlier selection
	this.root.render();
}

_VX.selection = _VX.add(pv.Panel);
_VX.selection.data([{x:20, y:20, dx:100, dy:100}])
	.cursor("crosshair")
	.events("all")
	.event("mousedown", pv.Behavior.select())
	.event("selectstart", function() {_VX.s = false; return _VX})
	.event("select", _VX.internalUpdate) //update dx, dy
	.add(pv.Bar)
	.visible(function(d, k, t) {return _VX.s})
	.left(function(d) {return d.x})
	.top(function(d) {return d.y})
	.width(function(d) {return d.dx})
	.height(function(d) {return d.dy})
	.fillStyle("rgba(255,0,0,.15)")
	.strokeStyle("white")
	.cursor("move")
	.event("mousedown", pv.Behavior.drag())
	.event("drag", _VX.internalUpdate) // update x,y
	//.event("mouseup", _VX.updateLinks ); // completed selection : single update only

_VX.render();