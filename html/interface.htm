<!DOCTYPE html>
<html>
<head>

	<title>Interface</title>
	
	<script type="text/javascript" src="protovis-3.2/protovis-r3.2.js"></script>
	<script type="text/javascript" src="suggest.js"></script>
	
	<script type="text/javascript">
//---------------------------------------
// Globals
//---------------------------------------

// variables
var v = [];
var v_old = [];

// visualizations
var vis = [];
var p = [];
var DX = [];
var plotId = 0;

// data or source
var bluePrint = [];
var r = [];

var X = false;

//---------------------------------------
// Common Functions
//---------------------------------------
function _gel(x) {return document.getElementById(x)}

function doAJAX(target) {

	xmlhttp = (window.XMLHttpRequest)?new XMLHttpRequest():(window.ActiveXObject)?new ActiveXObject("Microsoft.XMLHTTP"):null;
	
	if(xmlhttp == null) {// AJAX not supported
		alert('AJAX not Supported');
		return;
	}

	xmlhttp.open("GET", (target) ,false);
	xmlhttp.send(null);
	
	return xmlhttp.responseText;
}

// adds str before each element in arr
function concatAll( arr, str ) {
	for(i=0; i<arr.length; i++) {
		arr[i] = str + '.' + arr[i];
	}
	return arr;
}

function spanify( arr ) {
	var str = '';
	for( i=0; i<arr.length; i++)
		str += '<span>' + arr[i] + '</span>';
	return str;
}

function unspanify( arr ) {
	var str = [];
	for( i=0; i<arr.length; i++)
		str.push( arr[i].innerHTML );
	return str;
}

//---------------------------------------
// Protovis Data Functions
//---------------------------------------
function buildData() {
	var x = [];
	var len = 3 + Math.floor(Math.random()*10);
	for(i=0; i<len; i++)
		x[i] = Math.random();
	return x;
}

function getData( plotType, dataLoc, width, height) { // minimum args = 4

	this.w = width;
	this.h = height;

	this.data = JSON.parse( doAJAX( dataLoc ) );
	
	switch( plotType ) {
	
	case "histogram":
		break;

	case 'scatterplot':
		// scatterplot requires 2 more arguments: the names of the x and y fields
		var vx = arguments[4]||'x', vy = arguments[5]||'y';
		this.fields	= [ vx, vy ];
		this.x		= new Function("d", "return d." + vx);
		this.y		= new Function("d", "return d." + vy);
		this.xval 	= new Function("d", "return this.root.x(d." + vx + ")");
		this.yval 	= new Function("d", "return this.root.y(d." + vy + ")");
		break;

	case 'focus_context':
		//focus+context requires 3 more arguments: height of small graph, and names of x,y fields
		this.h2 = arguments[4];

		var vx = arguments[5]||'x', vy = arguments[6]||'y';
		this.x		= new Function("d", "return d." + vx);
		this.y		= new Function("d", "return d." + vy);
		this.xval	= new Function("d", "return this.root.x(d." + vx + ")");
		this.yval	= new Function("d", "return this.root.y(d." + vy + ")");
		this.fx		= new Function("d", "return this.root.fx(d." + vx + ")");
		this.fy		= new Function("d", "return this.root.fy(d." + vy + ")");
		break;

	default:
		alert('What the heck is a "' + plotType + '" ?!');
	}

	return this;
}
//---------------------------------------
// Protovis Source Code Creation
//---------------------------------------
function getSource( d ) {
	var source = '';
	switch( d.graph ) {
	
	case 'Scatterplot':
		var gData = 'new getData( "scatterplot",';
		gData += '"data/abbrv.json",'; // command - currenly json file
		gData += '300,300,'; // width and height
		gData += '"' + d.fields[0].replace('.','_') + '",';
		gData += '"' + d.fields[1].replace('.','_') + '"';
		gData += ')';
		source = bluePrint.scatterplot.replace(/_DATA/, gData ).replace(/_SCALE/, d.scale[0]).replace(/_SCALE/, d.scale[1]);
		break;
	}
	
	source = source.replace(/log\(0/g, 'log(1');
	source = source.replace(/_VX/g, 'vis["' + d.id + '"]').replace(/_DX/g, 'DX["' + d.id + '"]');
	return source;
}

//---------------------------------------
// visualization generation
//---------------------------------------
function generateVis() {

	//selected plot
	var oldV = _gel('vis').selected;
	
	// extract parameters
	var graph = oldV.childNodes[0].nodeValue;
	var fields = [];
	
	// could do this based on graph
	if(v['x']) fields.push( v['x'] ); // has to be true
	if(v['y']) fields.push( v['y'] );
	if(v['z']) fields.push( v['z'] );
	
	// create div
	var d = document.createElement('div');
	d.id = 'plot' + plotId++;
	d.className = 'vis';
	d.graph = graph;
	d.fields = fields;
	d.scale = ['linear', 'linear'];
	
	// register div
	for(i=0; i<p.length; i++)
	if(p[i]) {
		if(!vis[ p[i] ].links)
			vis[ p[i] ].links = [];
		vis[ p[i] ].links.push( d.id );
	}
	p.push( d.id );
	
	// generate and add protovis source
	var script = document.createElement('script');
	script.innerHTML = getSource(d);
	
	d.appendChild( script );
	document.body.appendChild( d );
	_gel('main').appendChild(d);
	
	// deselect
	oldV.className = oldV.className.replace(' selected', '');
	oldV.removeChild( oldV.getElementsByTagName('input')[0] );
	_gel('vis').selected = null;
}

function deleteVisualization( x ) { // not used right now
	
	var id = p[x];
	
	_gel( id ).parentNode.removeChild( _gel(id) );
	vis[ id ] = null;
	DX[ id ] = null;
	p[ x ] = null;
}

//---------------------------------------
// visualization selection
//---------------------------------------
function updateVisualizationList() {
	var count = 0;
	if( v['x'] ) count++;
	if( v['y'] ) count++;
	if( v['z'] ) count++;
	
	var av = [];
	switch( count ) {
	case 1:
		av.push( 'Histogram' );
		break;
	case 2:
		av.push( 'Scatterplot' );
		av.push( 'Area Chart' );
		av.push( 'Bar Chart' );
		break;
	case 3:
		break;
	}
	_gel('vis').innerHTML = spanify( av.sort() );
	
	//-----------------------------
	var selectVis = function(e) {
		var oldV = this.parentNode.selected;
		if(oldV) {
			oldV.className = oldV.className.replace(' selected', '');
			oldV.removeChild( oldV.getElementsByTagName('input')[0] );
		}
		
		this.className += ' selected';
		this.innerHTML += '<input type="button" value="Generate" onmouseup="generateVis()"/>'
		this.parentNode.selected = this;
		
		e.stopPropagation();
	}
	
	var s = _gel('vis').getElementsByTagName('span');
	_gel('vis').selected = null;
	for(i=0; i<s.length; i++) {
		s[i].className = s[i].innerHTML.replace(/\s/g,'');
		s[i].onclick = selectVis;
	}
	
}

function selectionComplete( vInput ) {
	// Congratulations ! Something has been selected !

	v[ vInput.id ] = vInput.value.replace(/\s/g,'');
	
	if( v[ vInput.id ] != v_old[ vInput.id ] ) {
		v_old[ vInput.id ] = v[ vInput.id ];
		updateVisualizationList();
	}
}

//---------------------------------------
// variables (and a tiny bit of vis selection)
//---------------------------------------
function setupSuggest() {
	var r = JSON.parse(doAJAX('relations.data'));
	var options = [];
	for(i=0; i<r.relations.length; i++) {
		options = options.concat( concatAll( r[ r.relations[i] ], r.relations[i] ) );
	}
	options.sort();
	 
	v_old['x'] = v['x'] = '';	createAutoComplete( options, _gel('x'), _gel('xsuggest') );
	v_old['y'] = v['y'] = '';	createAutoComplete( options, _gel('y'), _gel('ysuggest') );
	v_old['z'] = v['z'] = '';	createAutoComplete( options, _gel('z'), _gel('zsuggest') );
	
	// aforementioned vis selection portion
	document.onclick = function() {
		var oldV = _gel('vis').selected;
		if(oldV) {
			oldV.className = oldV.className.replace(' selected', '');
			oldV.removeChild( oldV.getElementsByTagName('input')[0] );
		}
		_gel('vis').selected = null;
	}
}

//---------------------------------------
// Page control
//---------------------------------------
function setSize() {
	_gel('main').style.width = (window.innerWidth || document.documentElement.clientWidth) - 400 + 'px';
	_gel('main').style.height = (window.innerHeight || document.documentElement.clientHeight) + 'px';
}

window.onload = function() {
	setSize();
	window.onresize = setSize;
	setupSuggest();
	
	bluePrint.scatterplot = doAJAX('Scatterplot.data');
}
	</script>
	
	<style type="text/css">
html, body {background:#FFF;width:100%;height:100%}
body {margin:0;padding:0;text-align:center;font-family:Verdana;font-size:16px}
/*
::-moz-selection{background-color:transparent;}
::selection{background-color:transparent;}
*/

#leftNav {
	width:400px;
	height:100%;
	background:#FFF;
	position:fixed;
	border-left:1px black solid;
	border-right:1px black solid;
}

#leftNav h2 {
	font-size:20px;
	border-top:1px black solid;
	border-bottom:1px black solid;
	margin:0px;
	padding:10px 0px;
	background:-webkit-gradient(linear, 0% 0%, 0% 100%, from(#EEE), to(#CCC));
	background:-moz-linear-gradient(top,#EEE,#CCC);
}

#leftNav>div {
	height:30%;
	overflow:hidden;
	background:-webkit-gradient(linear, 0% 0%, 0% 100%, from(#EEE), to(#FFF));
	background:-moz-linear-gradient(top,#EEE,#FFF);
}

#leftNav #cmd {
	height:170px;
}

#dim {
}

#dim>div {
	display:block;
	height:40px;
	text-align:left;
	margin-top:20px;
}
#dim span {
	border:1px black solid;
	padding:10px;
	margin:10px;
	background:#FFF;
}
#dim input[type="text"] {
	width:248px;
	font-size:20px;
	line-height:34px;
}
/*-----------------------------------*/
#vis {}
#vis span {
	display:block;
	font-size:20px;
	text-align:left;
	padding:5px 0px 5px 100px;
	line-height:50px;
	margin-top:18px;
	background:url('') no-repeat 20px 5px;
}
#vis span.selected {
	background-color:#444;
	color:#FFF;
}
#vis span.selected input {float:right; margin:13px 20px 0px 0px}
#vis span.Histogram 	{background-image:url('img/Histogram.png')}
#vis span.AreaChart 	{background-image:url('img/AreaChart.png')}
#vis span.BarChart 		{background-image:url('img/BarChart.png')}
#vis span.Scatterplot 	{background-image:url('img/Scatterplot.png')}
/*-----------------------------------*/
#main {
	margin-left:400px;
}
.vis {border:1px black solid; float:left; padding:20px;}
/*-----------------------------------*/
.suggest {
	position:absolute;
	background:#fff;
	border:#000 1px solid;
	max-height:200px;
	overflow:hidden;
	overflow-y:scroll;
}

.suggest div {
	background:#fff;
	color:#000;
	padding-left:4px;
	cursor:hand;
	text-align:left;
	line-height:30px;
}

.suggest div.over {
	color:#fff;
	background:#000;
}

#test {
	width:500px;
	height:500px;
	position:absolute;
	right:0px;
	top:0px;
	overflow:auto;
	border:1px black solid;
	display:none;
}

	</style>
	
</head>

<body>

<!-- control bar -->
<div id="leftNav">

<h2>Dimensions</h2>
<div id="dim">

	<div>
		<span>X</span>
		<input id="x" type="text">
		<div id="xsuggest" class="suggest" style="visibility:hidden;width:250px;"></div>
	</div>
	
	<div>
		<span>Y</span>
		<input id="y" type="text">
		<div id="ysuggest" class="suggest" style="visibility:hidden;width:250px;"></div>
	</div>
	
	<div>
		<span>Z</span>
		<input id="z" type="text">
		<div id="zsuggest" class="suggest" style="visibility:hidden;width:250px;"></div>
	</div>
	
</div>

<h2>Visualizations</h2>
<div id="vis">
</div>

<h2>Commands</h2>
<div id="cmd">
</div>
	
</div>
<!-- end of control bar -->

<div id="main"></div>

<textarea id="test"></textarea>

</body>
</html>
