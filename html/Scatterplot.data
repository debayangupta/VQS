
_DX = _DATA;

/* The root panel. vis[_VX] == this.root*/
_VX = new pv.Panel()
    .width(_DX.w)
    .height(_DX.h)
    .bottom(40)
    .left(40)
    .right(10)
    .top(5);

_VX.links = []; // why is this not working??
for(var ii=0; ii<p.length; ii++) {
	if( vis[ p[ii] ] != _VX ) {
		_VX.links.push(vis[ p[ii] ]);
	}
}

_VX.selectionArgs = 2;
_VX.position = pv.dict( _DX.fields, function(t) { return pv.Scale.linear( _DX.data , function(d) {return d[t]}).range(0, _DX.w ) });

_VX.xmax = pv.max(_DX.data, _DX.x);
//_VX.xmin = pv.min(_DX.data, _DX.x);

_VX.ymax = pv.max(_DX.data, _DX.y);
//_VX.ymin = pv.min(_DX.data, _DX.y);

/* scales. */
_VX.x = pv.Scale._SCALE(0, _VX.xmax ).range(0, _DX.h);
_VX.y = pv.Scale._SCALE(0, _VX.ymax ).range(0, _DX.h);

_VX.updating = false;

/* Y-axis and ticks. */
_VX.add(pv.Rule)
    .data(_VX.y.ticks())
    .bottom(_VX.y)
    .strokeStyle(function(d) {return d ? "#eee" : "#000"})
  .anchor("left").add(pv.Label)
    .visible(function(d) {return d > 0 && d < _VX.ymax})
    .text(_VX.y.tickFormat);

/* X-axis and ticks. */
_VX.add(pv.Rule)
    .data(_VX.x.ticks())
    .left(_VX.x)
    .strokeStyle(function(d) {return d ? "#eee" : "#000"})
  .anchor("bottom").add(pv.Label)
    .visible(function(d) {return d > 0 && d < _VX.xmax})
    .text(_VX.x.tickFormat);

_VX.s = false;
_VX.db = false;

_VX.tdata = _VX.add(pv.Panel);
_VX.tdata.data(_DX.data)
	.add(pv.Dot)
    .left(_DX.xval)
    .bottom(_DX.yval)
    .strokeStyle( 'black' )
	.size(10)
	.fillStyle(function(d) {
		var db = this.root.db;
		if( !db ) return 'white';
		return (db && ((d[db.px] < db.x1) || (d[db.px] > db.x2) || (d[db.py] < db.y1) || (d[db.py] > db.y2)) ? 'red' : 'lime');
	});

_VX.updateLinks = function() {
	var L = this.root.links;
	this.root.updating = true;
	for(i=0; i<L.length; i++)
		vis[ L[i] ].doUpdate(this.root, _DX.fields);
	this.root.updating = false;
}

_VX.doUpdate = function( src, d ) {
	if(this.root.updating)
		return;
	
	this.root.db = src.s;
	
	this.root.db.x1 = src.s.x1;
	this.root.db.x2 = src.s.x2;
	this.root.db.px = d[0];
	
	this.root.db.y1 = src.s.y1;
	this.root.db.y2 = src.s.y2;
	this.root.db.py = d[1];
	
	this.root.render();
}

_VX.dataUpdate = function( newData ) {
	this.root.tdata.data( newData );
	this.root.s = false; //removes earlier selection
	this.root.render();
}

_VX.internalUpdate = function( d ) {
	//cont. updatation
	this.root.s = d;
	
	this.root.s.x1 = this.root.x.invert(d.x);
	this.root.s.x2 = this.root.x.invert(d.x + d.dx);
	
	this.root.s.y2 = this.root.y.invert(_DX.h - d.y);
	this.root.s.y1 = this.root.y.invert(_DX.h - (d.y + d.dy) );
	
	this.root.updateLinks();

}

_VX.selection = _VX.add(pv.Panel);
_VX.selection.data([{x:20, y:20, dx:100, dy:100}])
	.cursor("crosshair")
	.events("all")
	.event("mousedown", pv.Behavior.select())
	.event("selectstart", function() {_VX.s = false; return _VX})
	.event("select", _VX.internalUpdate) //update dx, dy
	.add(pv.Bar)
	.visible(function(d, k, t) {return _VX.s})
	.left(function(d) {return d.x})
	.top(function(d) {return d.y})
	.width(function(d) {return d.dx})
	.height(function(d) {return d.dy})
	.fillStyle("rgba(0,50,0,.15)")
	.strokeStyle("white")
	.cursor("move")
	.event("mousedown", pv.Behavior.drag())
	.event("drag", _VX.internalUpdate) // update x,y
	//.event("mouseup", _VX.updateLinks ); // completed selection : single update only

_VX.add(pv.Label)
	.text( (_DX.fields[0]).replace("_",".") )
	.font("17px sans-serif")
	.textStyle("blue")
	.textShadow("0px 0px 20px white")
	.bottom(-30)
	.left( _DX.w / 2);

_VX.anchor("left").add(pv.Label)
	.text(_DX.fields[1].replace("_",".") )
	.font("17px sans-serif")
	.textStyle("blue")
	.textShadow("0px 0px 20px white")
	.textAngle( -Math.PI / 2 )
	.left(-30);

_VX.render();